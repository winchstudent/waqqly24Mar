**Dog Walker Management System**

---

**Overview:**
This repository contains code for a Node.js application designed to manage dog walker information for the web app 'Waqqly'. The application interacts with an Azure SQL Database to insert new walker details into the database. This README provides information on how to set up and use the application.

---

**Installation:**
1. Clone the repository to your local machine:
   ```
   git clone https://github.com/winchstudent/waqqly24Mar.git
   ```

2. Install dependencies:
   ```
   npm install
   ```

3. Ensure you have the required Azure SQL Database set up with appropriate credentials. Update the `sqlConfig` object in `index.js` with your Azure SQL Database credentials.

---

**Usage:**
1. To insert a new walker into the database, send a POST request with the following parameters:
   - `walkername`: Name of the walker.
   - `walkeremail`: Email of the walker.
   - `walkerlocation`: Location of the walker.

   Example request using cURL:
   ```
   curl -X POST -H "Content-Type: application/json" -d '{"walkername":"John Doe", "walkeremail":"john@example.com", "walkerlocation":"New York"}' http://localhost:3000/api/insertWalker
   ```

2. If successful, you will receive a response indicating that the walker has been inserted.

---

**Code Structure:**
- `index.js`: Main entry point of the application containing the Azure Function code.
- `sqlConfig`: Configuration object for connecting to the Azure SQL Database.
- `insertWalker`: Function to insert a new walker into the database.
- `context` and `req`: Parameters passed to the Azure Function representing the execution context and HTTP request.

---

**Dependencies:**
- `mssql`: Module for connecting to Microsoft SQL Server from Node.js.

---

**Contributing:**
Contributions to this project are welcome. If you find any issues or have suggestions for improvements, feel free to open an issue or submit a pull request.

---


**Contact:**
For any inquiries or assistance, please contact [your email address].

---
